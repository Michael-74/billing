{"version":3,"file":"v-click-outside.min.min.umd.js","sources":["../lib/v-click-outside.js","../lib/index.js"],"sourcesContent":["const isTouch =\n  typeof window !== 'undefined' && ('ontouchstart' in window || navigator.msMaxTouchPoints > 0)\nconst events = isTouch ? ['touchstart', 'click'] : ['click']\n\nconst instances = []\n\nfunction processDirectiveArguments(bindingValue) {\n  const isFunction = typeof bindingValue === 'function'\n  if (!isFunction && typeof bindingValue !== 'object') {\n    throw new Error('v-click-outside: Binding value must be a function or an object')\n  }\n\n  return {\n    handler: isFunction ? bindingValue : bindingValue.handler,\n    middleware: bindingValue.middleware || ((isClickOutside) => isClickOutside),\n    events: bindingValue.events || events,\n  }\n}\n\nfunction onEvent({ el, event, handler, middleware }) {\n  const isClickOutside = event.target !== el && !el.contains(event.target)\n\n  if (!isClickOutside) {\n    return\n  }\n\n  if (middleware(event, el)) {\n    handler(event, el)\n  }\n}\n\nfunction bind(el, { value }) {\n  const { handler, middleware, events } = processDirectiveArguments(value)\n\n  const instance = {\n    el,\n    eventHandlers: events.map((eventName) => ({\n      event: eventName,\n      handler: (event) => onEvent({ event, el, handler, middleware }),\n    })),\n  }\n\n  instance.eventHandlers.forEach(({ event, handler }) => document.addEventListener(event, handler))\n  instances.push(instance)\n}\n\nfunction update(el, { value }) {\n  const { handler, middleware, events } = processDirectiveArguments(value)\n  const instance = instances.find((instance) => instance.el === el)\n\n  instance.eventHandlers.forEach(({ event, handler }) =>\n    document.removeEventListener(event, handler),\n  )\n\n  instance.eventHandlers = events.map((eventName) => ({\n    event: eventName,\n    handler: (event) => onEvent({ event, el, handler, middleware }),\n  }))\n\n  instance.eventHandlers.forEach(({ event, handler }) => document.addEventListener(event, handler))\n}\n\nfunction unbind(el) {\n  const instance = instances.find((instance) => instance.el === el)\n  instance.eventHandlers.forEach(({ event, handler }) =>\n    document.removeEventListener(event, handler),\n  )\n}\n\nconst directive = {\n  bind,\n  update,\n  unbind,\n  instances,\n}\n\nexport default directive\n","import directive from './v-click-outside'\n\nconst plugin = {\n  install(Vue) {\n    Vue.directive('click-outside', directive)\n  },\n  directive,\n}\n\nexport default plugin\n"],"names":["const","events","window","navigator","msMaxTouchPoints","instances","processDirectiveArguments","bindingValue","isFunction","Error","handler","middleware","isClickOutside","onEvent","ref","event","target","el","contains","directive","instance","eventHandlers","map","eventName","forEach","document","addEventListener","push","find","removeEventListener","install","Vue"],"mappings":"iLAAAA,IAEMC,EADc,oBAAXC,SAA2B,iBAAkBA,QAAUC,UAAUC,iBAAmB,GACpE,CAAC,aAAc,SAAW,CAAC,SAE9CC,EAAY,GAElB,SAASC,EAA0BC,OAC3BC,EAAqC,mBAAjBD,MACrBC,GAAsC,iBAAjBD,QAClB,IAAIE,MAAM,wEAGX,CACLC,QAASF,EAAaD,EAAeA,EAAaG,QAClDC,WAAYJ,EAAaI,qBAAgBC,UAAmBA,GAC5DX,OAAQM,EAAaN,QAAUA,GAInC,SAASY,EAAQC,mDACQC,EAAMC,SAAWC,IAAOA,EAAGC,SAASH,EAAMC,SAM7DL,EAAWI,EAAOE,IACpBP,EAAQK,EAAOE,GA0CnBjB,IAAMmB,EAAY,MAtClB,SAAcF,EAAIH,SACwBR,sCAElCc,EAAW,IACfH,EACAI,uBAAsBC,aAAKC,UACzBR,MAAOQ,EACPb,iBAAUK,UAAUF,EAAQ,OAAEE,KAAOE,UAAIP,aAASC,SAItDS,EAASC,cAAcG,iBAASV,UAAuBW,SAASC,sCAChErB,EAAUsB,KAAKP,WAGjB,SAAgBH,EAAIH,SACsBR,iDAClCc,EAAWf,EAAUuB,cAAMR,UAAaA,EAASH,KAAOA,IAE9DG,EAASC,cAAcG,iBAASV,UAC9BW,SAASI,yCAGXT,EAASC,cAAgBpB,EAAOqB,aAAKC,UACnCR,MAAOQ,EACPb,iBAAUK,UAAUF,EAAQ,OAAEE,KAAOE,UAAIP,aAASC,QAGpDS,EAASC,cAAcG,iBAASV,UAAuBW,SAASC,8CAGlE,SAAgBT,GACGZ,EAAUuB,cAAMR,UAAaA,EAASH,KAAOA,IACrDI,cAAcG,iBAASV,UAC9BW,SAASI,oDAQXxB,SCvEa,CACbyB,iBAAQC,GACNA,EAAIZ,UAAU,gBAAiBA,cAEjCA"}